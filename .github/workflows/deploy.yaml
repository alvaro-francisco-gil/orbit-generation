name: Deploy to GitHub Pages

permissions:
  contents: write
  pages: write

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install Julia
        run: |
          echo "Installing Julia..."
          wget https://julialang-s3.julialang.org/bin/linux/x64/1.10/julia-1.10.5-linux-x86_64.tar.gz
          tar -xvzf julia-1.10.5-linux-x86_64.tar.gz
          sudo mv julia-1.10.5 /opt/julia
          sudo ln -s /opt/julia/bin/julia /usr/local/bin/julia
          rm julia-1.10.5-linux-x86_64.tar.gz
          echo "Julia version:"
          julia --version
          
      - name: Set up Julia environment
        run: |
          # Set up Julia depot
          export JULIA_DEPOT_PATH=/opt/julia_depot
          mkdir -p $JULIA_DEPOT_PATH
          echo "JULIA_DEPOT_PATH: $JULIA_DEPOT_PATH"
          
          # Install required Julia packages
          julia -e '
          using Pkg;
          Pkg.add(["DifferentialEquations", "Polynomials", "LinearAlgebra", "MAT", "NPZ", "PyCall"]);
          
          # Test packages
          println("Testing packages...");
          using DifferentialEquations;
          using PyCall;
          println("All packages loaded successfully");
          '
          
          # Export Julia depot path for subsequent steps
          echo "JULIA_DEPOT_PATH=/opt/julia_depot" >> $GITHUB_ENV
          
      - name: Install and configure PyJulia
        run: |
          pip install julia
          
          # Set environment variables for Julia-Python interoperability
          export PYTHON=$(which python)
          export JULIA_PYTHONCALL_EXE=$(which python)
          
          # Configure PyCall with the correct Python
          julia -e '
          ENV["PYTHON"]="'$(which python)'";
          using Pkg;
          Pkg.build("PyCall");
          using PyCall;
          println("PyCall built with Python: ", PyCall.python);
          '
          
          # Initialize PyJulia
          python -c "import julia; julia.install()"
          
          # Test Julia-Python integration
          python -c "
          from julia.api import Julia; 
          jl = Julia(compiled_modules=False); 
          from julia import Main; 
          Main.eval('println(\"Testing PyCall...\"); using PyCall; println(\"PyCall loaded\")')
          Main.eval('println(\"Testing DifferentialEquations...\"); using DifferentialEquations; println(\"DifferentialEquations loaded\")')
          "
          
          # Export environment variables for subsequent steps
          echo "PYTHON=$(which python)" >> $GITHUB_ENV
          echo "JULIA_PYTHONCALL_EXE=$(which python)" >> $GITHUB_ENV
          
      - name: Set up IPython startup for Julia
        run: |
          mkdir -p ~/.ipython/profile_default/startup/
          cat > ~/.ipython/profile_default/startup/01-julia-init.py << EOF
          import os
          import sys
          
          # Set environment variables
          os.environ['JULIA_DEPOT_PATH'] = '/opt/julia_depot'
          os.environ['JULIA_PYTHONCALL_EXE'] = '$(which python)'
          os.environ['PYTHON'] = '$(which python)'
          
          try:
              from julia.api import Julia
              jl = Julia(compiled_modules=False)
              from julia import Main
              Main.eval('using PyCall; println("PyCall loaded")')
              Main.eval('using DifferentialEquations; println("DifferentialEquations loaded")')
              print("Julia environment ready for notebook execution")
          except Exception as e:
              print(f"Warning: Julia initialization error: {e}")
          EOF
          
      - name: Run fastai quarto-ghp action with environment variables
        uses: fastai/workflows/quarto-ghp@master
        env:
          JULIA_DEPOT_PATH: /opt/julia_depot
          PYTHON: $(which python)
          JULIA_PYTHONCALL_EXE: $(which python)
