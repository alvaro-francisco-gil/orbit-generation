name: CI
on:  [workflow_dispatch, pull_request, push]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install CUDA dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git \
            build-essential \
            libhdf5-dev \
            python3-pip \
            python3-dev \
            sudo \
            wget
          
      - name: Install PyTorch with CUDA
        run: |
          pip install torch --extra-index-url https://download.pytorch.org/whl/cu121
          
      - name: Install project dependencies
        run: |
          pip install seaborn scikit-learn umap-learn h5py matplotlib plotly pandas pytorch-lightning fastdtw papermill
          pip install wandb pytest
          pip install ipykernel jupyter nbdev
          nbdev_install_quarto
          
      # Add this step to properly clean notebooks before testing
      - name: Setup Git config
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
      - name: Clean and prepare notebooks
        run: |
          echo "Installing latest nbdev..."
          pip install -U nbdev
          
          echo "Setting up nbdev hooks..."
          nbdev_install_hooks
          
          echo "Cleaning notebooks..."
          nbdev_clean
          
          echo "Checking if notebooks are properly cleaned..."
          if [[ -n "$(git status --porcelain -uno)" ]]; then
            echo "Some notebooks need cleaning. Auto-committing changes..."
            git add -A
            git commit -m "Auto-clean notebooks [CI]"
          else
            echo "All notebooks are clean."
          fi
          
      - name: Install Julia
        run: |
          echo "Installing Julia..."
          wget https://julialang-s3.julialang.org/bin/linux/x64/1.10/julia-1.10.5-linux-x86_64.tar.gz
          tar -xvzf julia-1.10.5-linux-x86_64.tar.gz
          sudo mv julia-1.10.5 /opt/julia
          sudo ln -s /opt/julia/bin/julia /usr/local/bin/julia
          rm julia-1.10.5-linux-x86_64.tar.gz
          echo "Julia version:"
          julia --version
          echo "Julia path:"
          which julia
          
      - name: Set up Julia environment
        run: |
          echo "Setting up Julia environment..."
          export JULIA_DEPOT_PATH=/opt/julia_depot
          mkdir -p $JULIA_DEPOT_PATH
          echo "JULIA_DEPOT_PATH: $JULIA_DEPOT_PATH"
          
          echo "Installing Julia packages..."
          # Match exactly the packages listed in the Dockerfile
          julia -e 'using Pkg; Pkg.add(["DifferentialEquations", "Polynomials", "LinearAlgebra", "MAT", "NPZ"])'
          
          # Add PyCall explicitly as the Dockerfile might be missing this
          julia -e 'using Pkg; Pkg.add("PyCall")'
          
          echo "Setting up IJulia..."
          julia -e 'using Pkg; Pkg.add("IJulia"); using IJulia; IJulia.installkernel("Julia")'
          
      - name: Install and configure PyJulia
        run: |
          echo "Installing PyJulia..."
          pip install julia
          
          echo "Setting PYTHON environment variable for PyCall..."
          export PYTHON=$(which python)
          echo "PYTHON set to: $PYTHON"
          
          # Set environment variables for Julia-Python interoperability
          export JULIA_PYTHONCALL_EXE=$(which python)
          
          # Make sure PyCall is properly installed and then build it
          echo "Installing and building PyCall with the correct Python..."
          julia -e '
          ENV["PYTHON"]="'$(which python)'";
          using Pkg;
          
          # Check if PyCall is installed, install if not
          if !haskey(Pkg.project().dependencies, "PyCall")
              println("Installing PyCall...");
              Pkg.add("PyCall");
          end
          
          # Install DifferentialEquations in the same environment
          if !haskey(Pkg.project().dependencies, "DifferentialEquations")
              println("Installing DifferentialEquations...");
              Pkg.add("DifferentialEquations");
          end
          
          # Also add other required packages
          for pkg in ["Polynomials", "LinearAlgebra", "MAT", "NPZ"]
              if !haskey(Pkg.project().dependencies, pkg)
                  println("Installing ", pkg, "...");
                  Pkg.add(pkg);
              end
          end
          
          # Now build PyCall with the correct Python
          println("Building PyCall...");
          Pkg.build("PyCall");
          
          # Verify PyCall works
          println("Testing PyCall...");
          using PyCall;
          println("PyCall successfully loaded");
          
          # Verify DifferentialEquations works
          println("Testing DifferentialEquations...");
          using DifferentialEquations;
          println("DifferentialEquations successfully loaded");
          '
          
          # Initialize PyJulia (as done in the Dockerfile)
          echo "Initializing PyJulia..."
          python -c "import julia; julia.install()"
          
          # Test the complete Julia-Python interoperability
          echo "Testing complete Julia-Python integration..."
          python -c "from julia.api import Julia; jl = Julia(compiled_modules=False); from julia import Main; print('Julia-Python bridge established'); Main.eval('println(\"Testing imports:\")'); Main.eval('using PyCall; println(\"PyCall loaded\")'); Main.eval('using DifferentialEquations; println(\"DifferentialEquations loaded\")')"
          
          # Export environment variables for later steps
          echo "JULIA_DEPOT_PATH=${JULIA_DEPOT_PATH}" >> $GITHUB_ENV
          echo "PYTHON=$(which python)" >> $GITHUB_ENV
          echo "JULIA_PYTHONCALL_EXE=$(which python)" >> $GITHUB_ENV
          
      # Add a step to prepare notebooks for Julia execution
      - name: Prepare notebooks for Julia execution
        run: |
          # Ensure JULIA_DEPOT_PATH is set correctly
          export JULIA_DEPOT_PATH=/opt/julia_depot
          echo "Using JULIA_DEPOT_PATH: $JULIA_DEPOT_PATH"
          
          echo "Ensuring packages are in the correct environment..."
          julia -e '
          using Pkg;
          
          # Print depot information for debugging
          println("Depot paths: ", DEPOT_PATH)
          
          # First ensure we have an active project
          Pkg.activate()
          println("Active project path: ", Pkg.project().path)
          
          # Verify PyCall is installed
          if !haskey(Pkg.project().dependencies, "PyCall")
              println("Installing PyCall...")
              Pkg.add("PyCall")
              Pkg.build("PyCall")
          else
              println("PyCall already installed")
          end
          
          # Verify DifferentialEquations is installed
          if !haskey(Pkg.project().dependencies, "DifferentialEquations")
              println("Installing DifferentialEquations...")
              Pkg.add("DifferentialEquations")
          else
              println("DifferentialEquations already installed")
          end
          
          # Verify all required packages are functional
          println("Testing package imports...")
          using PyCall
          using DifferentialEquations
          println("All packages successfully loaded")
          '
          
          echo "Creating a Julia module to test PyCall and Julia integrations..."
          cat > test_julia_python.py << EOF
          from julia.api import Julia
          jl = Julia(compiled_modules=False)
          from julia import Main
          
          print("Julia depot path from Python:", Main.eval('DEPOT_PATH'))
          
          # Test importing PyCall from Julia
          Main.eval('println("Testing PyCall import from Julia:"); using PyCall; println("PyCall successfully imported")')
          
          # Test importing DifferentialEquations from Julia
          Main.eval('println("Testing DifferentialEquations import from Julia:"); using DifferentialEquations; println("DifferentialEquations successfully imported")')
          EOF
          
          echo "Running Julia-Python integration test..."
          # Make sure the environment variables are passed to the Python process
          JULIA_DEPOT_PATH=$JULIA_DEPOT_PATH python test_julia_python.py
          
      - name: Set up nbdev environment for Julia
        run: |
          # Create a setup script that nbdev will use
          cat > ~/.juliarc.py << EOF
          import os
          import julia
          
          # Set environment variables for Julia
          os.environ['JULIA_DEPOT_PATH'] = '/opt/julia_depot'
          os.environ['JULIA_PYTHONCALL_EXE'] = '$(which python)'
          os.environ['PYTHON'] = '$(which python)'
          
          # Pre-initialize Julia to avoid issues during testing
          from julia.api import Julia
          jl = Julia(compiled_modules=False)
          from julia import Main
          
          # Preload required packages
          Main.eval('using PyCall')
          Main.eval('using DifferentialEquations')
          print("Julia environment successfully set up")
          EOF
          
          # Create a script that nbdev can find to set up the Julia environment
          mkdir -p ~/.ipython/profile_default/startup/
          cat > ~/.ipython/profile_default/startup/01-julia-init.py << EOF
          import sys
          import os
          print("Initializing Julia environment for IPython...")
          
          # Set environment variables
          os.environ['JULIA_DEPOT_PATH'] = '/opt/julia_depot'
          os.environ['JULIA_PYTHONCALL_EXE'] = '$(which python)'
          os.environ['PYTHON'] = '$(which python)'
          
          try:
              from julia.api import Julia
              jl = Julia(compiled_modules=False)
              from julia import Main
              Main.eval('using PyCall; println("PyCall loaded")')
              Main.eval('using DifferentialEquations; println("DifferentialEquations loaded")')
              print("Julia environment ready")
          except Exception as e:
              print(f"Error initializing Julia: {e}")
              # Don't crash IPython if Julia fails to initialize
          EOF
          
          # Test that the startup script works
          echo "Testing IPython startup script..."
          python -c "import IPython; IPython.start_ipython(argv=['--quick', '--quiet', '-c', 'print(\"IPython startup test complete\")'])"
          
      - name: Run nbdev CI
        env:
          JULIA_DEPOT_PATH: /opt/julia_depot
          PYTHON: $(which python)
          JULIA_PYTHONCALL_EXE: $(which python)
        run: nbdev_test --flags ""
